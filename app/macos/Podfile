platform :osx, '10.15'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
  end

  # Add build phase to copy Opus library to app bundle
  opus_lib_source = File.join(File.dirname(__FILE__), 'Frameworks', 'libopus.dylib')
  if File.exist?(opus_lib_source)
    puts "✅ Found Opus library at: #{opus_lib_source}"

    # Add a shell script build phase to Runner target
    runner_project = installer.aggregate_targets[0].user_project
    runner_target = runner_project.targets.find { |t| t.name == 'Runner' }

    if runner_target
      # Check if the build phase already exists
      existing_phase = runner_target.shell_script_build_phases.find { |p| p.name == 'Copy Opus Library' }

      unless existing_phase
        puts "Adding 'Copy Opus Library' build phase to Runner target"
        phase = runner_target.new_shell_script_build_phase('Copy Opus Library')
        phase.shell_script = <<-SCRIPT
#!/bin/bash
# Copy Opus library to app bundle
OPUS_SOURCE="${SRCROOT}/Frameworks/libopus.dylib"
OPUS_DEST="${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}/libopus.dylib"

if [ -f "$OPUS_SOURCE" ]; then
    echo "Copying Opus library from: $OPUS_SOURCE"
    echo "Copying Opus library to: $OPUS_DEST"
    mkdir -p "${BUILT_PRODUCTS_DIR}/${FRAMEWORKS_FOLDER_PATH}"
    cp "$OPUS_SOURCE" "$OPUS_DEST"
    echo "✅ Opus library copied successfully"
else
    echo "⚠️  Warning: Opus library not found at: $OPUS_SOURCE"
fi
        SCRIPT
        runner_project.save
      else
        puts "✓ 'Copy Opus Library' build phase already exists"
      end
    end
  else
    puts "⚠️  Warning: Opus library not found at: #{opus_lib_source}"
    puts "   Omi device recordings with Opus codec will not work!"
  end
end
